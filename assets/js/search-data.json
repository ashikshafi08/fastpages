{
  
    
        "post0": {
            "title": "How would I learn to code, if it's for now - Part 1",
            "content": "How would I learn to code, if it’s for now - Part 1 . . What comes to your mind when you hear the word Programming? . Please, don’t ever say it’s HTML (or) CSS neither both isn’t a programming language. But still, we would have at least came across things like, . Java | Python | Javascript and the list go on… | . Before jumping into the blog, I am gonna cut out technical jargon as usual. This is not a blog from a technical perspective rather, one that would help you fix the learning better. . If you started to learn a Programming language, or even after learning you somewhere felt lost then this could be the blog might fix you . Why I am writing this? . You could ask me what made me write this? Well, simple, I am a self-taught Machine Learning Practitioner, I learned to code like everyone from the internet. . But I went in through difficulties and some roadblocks through the way, which even at times made me quit the idea of coding itself or somewhere it felt this isn’t for me. I have been there and I assume even people might felt that at some point isn’t? . Disclaimer: Everything you read here is absolutely out from my experience and my learnings. Some may disagree with it at times and take things as a grain of salt. . Why you should read this? . Well, because I don’t want you to waste your time looking for the right course or scratching your head at times waiting for the right thing. And even as a friend (if you consider). . I had a hard time choosing the courses or materials that could teach me the whole thing. But looking back, I was depending on courses and putting my faith in them. Courses are good, but at times we hit the tutorial hell. . Read my blog here to know more about whats Tutorial hell. . For now, it’s like a loop where we will be just finishing the course. Trust me, just because you did some course on Python, doesn’t mean you know it well. . Somehow people think the only way to learn to code is just by the means of taking different courses. Even I was there jumping from one course to another but it never improved my progress. . Note: I will be leaving up some links which helped me in my learning and eventually will do a favor for you too. . Don’t fall into the prey of Frameworks . When I was learning python for the first time, the motto was to get into Machine Learning for sure that’s obvious why most people choose python. . There were these frameworks popping out and it was the center of attraction, as tech enthusiasts I always wanted to equip myself with the best tools and especially the new ones. . This is where my shiny syndrome for frameworks started, I forget about learning python the way it should be (including OOP’s), most courses where I learned, the OOP’s concept was ignored. . But when I took the path of Experimenting Learning dumping down the tutorials, I was keen on working on my foundations. Learn things from documentation and more of research kinda way. I found it quite progressing when I tried on Pytorch, but this is where I felt like a complete noob. . While I was surfing through documentation and stuffs certain Python code doesn’t make sense to me, meaning hard to decode what’s written on there. . It was a complete noob-like feeling, I thought I knew python but things were not what I thought. . A fix in need is a fix indeed . I said above already, many people opt for the idea of learning from courses. There is no issue in doing that so, but it is when you fall into the loop. . How could we fix this? . Recently, I framed a thing called Experimental Learning, I watched video’s of other people on Youtube and observed how they did it. . Learning can be of two ways, one is we learn by Consuming something (courses, books, etc…) and another way is by Creating (trying to solve a problem, etc…). . When we mix these two wonderful components our learnings get better 10X times, but the problem is, we always spend more time on Consuming things. We should keep the balance 50–50 rather than weighing one side more. . Consuming . This is where you will be in the act of taking courses and reading books related to what programming langue you want to learn. But I see only fewer people opt for books, but I think books are really a good substitute for courses. . Stick with one course rather than too many, your goal should not be finishing the course and acquiring the certificate. Your purpose should be clear, you want to acquire this skill, not the certificate. . Creating . This is the fun part, where you will practice whatever you learned. Whatever I learn from the course at times couldn’t help me to solve real-world projects. . I end up hitting google and StackOverflow reading tons and tons of blogs and tutorials, read other’s code to find how others did it, and try reverse engineer them. You see there’s a lot of learning that goes in here. . In this way, we learn what we actually need to solve the problem rather than watching hours of tutorials with no clue whats the purpose. . The eye shrinks for you, which means you know what you want and your intent will be on finding just your need. . So now you might have an idea of whats Creating and Consuming really means, as I said by mixing them we could do wonders in our learning. . In the next part of this blog, will look into how we could mix these two pieces of stuff for enhancing our learning and useful courses and tidbits that could uplift your learning journey. . Here is what Part 2 of this blog contains: . Mixing Creation vs Consumption | Fixing the forgetting curve | Using spaced repetition for efficient learning. | Resources and course links!! | . (Check out now!)[#] .",
            "url": "https://ashikshafi08.github.io/fastpages/programming/2021/12/24/hwiltc_1.html",
            "relUrl": "/programming/2021/12/24/hwiltc_1.html",
            "date": " • Dec 24, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Hwltc_2",
            "content": "How would I learn to code, if it’s for now - Part 2 . . Thanks for landing on Part 2 of the series, still if you haven’t read (Part 1)[] check them out to understand what we are talking about. . In the earlier blog, we discussed the mindset and it was more about how you should prepare yourselves to tackle it throughout the journey. Getting the right mindset is really important, you can learn to code anywhere but bringing out the mindset all matters. . Mixing Creation and Consumption . For instance, let’s take you to want to learn to make a website. Before taking a jump in, you gotta make sure what are the things I gotta learn. Planning and knowing the topics you are going to learn will accelerate your learning journey. . If not, there are courses out there that do this for you. Go through their contents and check out the reviews about the course, if you are satisfied then go ahead. And for someone who couldn’t afford courses, you have to make your own research, I will leave some links below later so it can lower the hustle for you. . Alright, now we are all set, got the curriculum and a plan of what we are going to learn. The first step would be falling into the Consuming stage, where you will focus on learning new things that you haven’t come across. . This is where most people goof up, they fall into the tutorial hell without their own acknowledgment. We have a fix for this, and this is why mixing up creation and consumption comes in handy, not only you could just escape the tutorial hell but it also improve your learning. . The Plan . Rather than getting carried away with the course, have a 30 days rule. In this rule, you dedicate 20 days for consumption and 10 days for creation. . Spend your next 20 days on focusing just the course, don’t fall for anything. Your absolute focus should be on learning the material or course for the next 20 days. More preferably you can even choose the topics you would be learning for the next 20 days and focus on them. . I think 20 days is legit, it’s nominal and things come under in a one-month bed. . Next is the creation stage, remember after spending 20 days consuming a large number of materials now it’s time to put out them in a real test. With whatever you learned so far, put them to the test. There are a lot of sites out there that hold practice problems for you to work on, but it’s not the case you always get them right. . Chances are high you will fail to solve certain problems, but remember to try as much as you can in the span of 10 days. You are in the Creation stage, where your intent is just to create and practice, no matter things don’t get right but the idea here is to break the tutorial hell. . You can practice or solve problems sites like, . Hackerrank | TopCoder | FreeCodeCamp ( you can learn even here) | Edabit | Codechef | . And there is a lot out there, but out of my perspective, these are more than enough. If you cant find a solution for something within those 10 days, learn from others. There will be solutions posted up there by other programmers like you, if you cant reproduce the solution feel free to learn from other’s code. But don’t copy them!! . If you are learning web or app development, with the things you learned for 20 days trying to create something small of your own be it a landing page, just a static app whatever sparks your interest. . Do this 20/10 days rule over and over throughout your learning, take your time to observe, and take a pause but don’t cut the flow. By falling into this repetition chances are high you grasp the knowledge way better, courses out there don’t hold everything you need to know. . But spending 10 days on creating not only helps you quit tutorial hell but also you get to learn new things out of your course. . Fixing our forgetting curve . Even after spending hours and hours learning something we tend to forget them, especially the hard part at times. Our goal is to learn to program efficiently, you could ramp up the tutorials but the idea of recalling helps you to retain your learning curve. . . Above is the Ebbinghaus forgetting curve, if you observe the graph as the days increase your memory retention in % decreases. You remember things the best for a day or two, followed by you tend to have a drop in the memory as the days go by. . To learn more about Ebbinghaus forgetting curve check here. . You could have sensed the idea behind the forgetting curve, but we can fix this with something called spaced repetition. . . Spaced repetition is nothing but recalling what you learned, we could fix our forgetting curve by recalling things that we learned on daily basis. To do this, we could grab a helping hand app called (Anki)[https://medium.com/r/?url=https%3A%2F%2Fapps.ankiweb.net%2F], they are powerful flashcards that help you in the process of recalling things. . . You can read here how to get most out of Anki. . Above is an example of how you could Anki for your learning. You can use these flashcards to remember what does a particular syntax does, the meaning of that syntax, etc… . If you want to know more about how to use Anki for programming check out this video by Daniel Bourke. . Alright, let us wrap up with the pep talk thing for now. I Will dive into some resources I would go back now, to learn everything from scratch. I give out both paid and non-paid resources, the choice is up to you guys. . CS50: Introduction to Computer Science: You will encounter a Passionate teacher David J. Malan, the whole Computer Science topics even might make sense to a no-brainer. I prefer, starting your journey with this course and care about the rest of things later. This gives you a greater intuition and kicks start to the field of Computer Science. | Even they do have other courses related to different fields of Computer Science, check them out here on their Youtube Channel. . Computer Science Degree: Courses which can teach you computer science from scratch, if you couldn’t spend for a college degree, feel free to go through these courses which are better than most courses on universities. Teach yourself Computer Science (Free) | Open Source Society University (Free) | A Self-Learning, Modern Computer Science (Free) | . | FreeCodeCamp: My favorite resource, a great community with passionate individuals who are willing to offer free education. You will find a wide variety of resources even on their Youtube channel from game development to deep learning. | FreeCodeCamp’s Youtube Channel (Free) . Udemy: A well-known platform for online education, quality courses with great instructors teaching more than 35 million students are learning by this platform, with 57k teachers with great content. | Lemme list down certain courses which I had been through and I think they can benefit you too. . Complete Machine Learning &amp; Data Science Bootcamp 2021: This is a course suggested if you are interested in the field of Data Science. The good thing about this course is it will help you to get started, from there you could find your way out. Unlike most courses, cramping you with too much jargon, Daniel had done an intelligent job of teaching with great analogies which makes things easier. | 100 Days of Code - The Complete Python Pro Bootcamp 2021: Awesome course for people’s doesnt just like videos and wanna add a bit of challenge to it. As we discussed in the blog, prevention of falling into the tutorial hell. This course would do that and puts you on challenges every day and builds consistency. | The Web Developer Bootcamp 2021: Colt has redone the entire course and structured the Bootcamp for absolute beginners who just want to jump into the field of Web. You will get to learn great tools and frameworks throughout the course. | The Complete JavaScript Course 2020: From Zero to Expert! : If you are looking to learn Javascript, this is the course to do so. A comprehensive course that has advanced javascript topics like ES6+ and much more. 50+ Challenges and assignments to test your skills. | . The above resources are used by me, rather than throwing out fancy shits at you guys. If you cant afford courses, there are always free courses out there with better interpretation than the paid ones. . Get back to your learning only when you got a purpose. Learning becomes easy when you are learning something to solve a problem. Find the problem and learn the skills you need to solve them. . The two blogs are out of my experience and cutting out the jargon, giving you the methodology and the right mindset was the key behind this whole blog so far. . Let’s put an end to the whole thing for now. Thanks for tuning in! Good luck with your Journey. . Keep Learning! . Keep Creating! .",
            "url": "https://ashikshafi08.github.io/fastpages/2021/04/12/hwltc_2.html",
            "relUrl": "/2021/04/12/hwltc_2.html",
            "date": " • Apr 12, 2021"
        }
        
    
  
    
        ,"post2": {
            "title": "Intro to Maps, Filters and List Comprehension in Python",
            "content": "How to use Maps, Filters and List Comprehension in Python. . This notebook will covers the tutorial of map,filter and list comprehension. It&#39;s me learning these python goodies and documenting aside, so someday I could look up and revise stuffs. . I am going through the course on Coursera called Python-3 Programming from University of Michigan. Gotta admit I learnt alot of Python from there and still doing. Earlier I used to take notes on Notion, but now I thought of getting my hands dirty by coding along and take notes in Colab. . Also anyone interested or wanna refresh their Python skills could even make use of it. . Maps . Python provides built-in functions map and filter, even a new syntax called list comprehension that lets you express a mapping/filtering operation. Most documentations and programmers use list comprehension and it seem&#39;s more like a pythonic way of writing code. . Map, and filter are commands that you would use in high-performance computing on big datasets. http://en.wikipedia.org/wiki/MapReduce . . def doubleStuff(a_list): &#39;&#39;&#39; Returns a new list in which contains doubles of the elements in a list &#39;&#39;&#39; # Accum list new_list = [] # Looping through values and making the calculation for value in a_list: double_elem = 2 * value new_list.append(double_elem) return new_list # Using the above function a_list = [1 , 2, 3 , 4, 5 , 6] print(f&#39;List before the values were got double: {a_list}&#39;) double_list = doubleStuff(a_list) print(f&#39; nThe list after the values they got double the number: {double_list}&#39;) . List before the values were got double: [1, 2, 3, 4, 5, 6] The list after the values they got double the number: [2, 4, 6, 8, 10, 12] . We can write the above function with less than one line of code using the map function. . Map is a function which takes functions as the first input and sequence as an second input. map(function , sequence). Map just says apply the transforms (function) to every element in this sequence. . Map always expects a transformer function. . def double(value): return 2*value map_double_list = list(map(double , a_list)) print(f&#39;Using map function: {map_double_list}&#39;) . Using map function: [2, 4, 6, 8, 10, 12] . I earlier tried just map(double , a_list) which gave me just the map object. It turns out to be enclosing the map object by a list will gives us the list object. . But why this happens? Map function returns an iterator, it doesn&#39;t want to store the list in it&#39;s memory. It&#39;s still an iterator and we can grab the list we needed by enclosing the map object by a list which prevents pain to memory . . # Multiply 5 to every value map_lambda_list = list(map(lambda value: 5*value , a_list)) print(f&#39;Multiplying 5 to every element: {map_lambda_list}&#39;) . Multiplying 5 to every element: [5, 10, 15, 20, 25, 30] . . Let&#39;s Solve some Problems! . Gotta go through more: https://www.w3resource.com/python-exercises/map/index.php . Below we have provided a list of strings called abbrevs. Use map to produce a new list called abbrevs_upper that contains all the same strings in upper case. | abbrevs = [&#39;usa&#39; , &#39;esp&#39; , &#39;chn&#39; , &#39;jpn&#39; , &#39;mex&#39; , &#39;can&#39; , &#39;rus&#39; , &#39;rsa&#39; , &#39;jam&#39;] . upperAbbrev_list = [] for abbrev in abbrevs: upperAbbrev_list.append(abbrev.upper()) print(upperAbbrev_list) . [&#39;USA&#39;, &#39;ESP&#39;, &#39;CHN&#39;, &#39;JPN&#39;, &#39;MEX&#39;, &#39;CAN&#39;, &#39;RUS&#39;, &#39;RSA&#39;, &#39;JAM&#39;] . upperCase_abbrevs = list(map(lambda abbrev: abbrev.upper() , abbrevs)) print(upperCase_abbrevs) . [&#39;USA&#39;, &#39;ESP&#39;, &#39;CHN&#39;, &#39;JPN&#39;, &#39;MEX&#39;, &#39;CAN&#39;, &#39;RUS&#39;, &#39;RSA&#39;, &#39;JAM&#39;] . Using map, create a list assigned to the variable greeting_doubled that doubles each element in the list. | lst = [[&quot;hi&quot;, &quot;bye&quot;], &quot;hello&quot;, &quot;goodbye&quot;, [9, 2], 4] . lst = [[&quot;hi&quot;, &quot;bye&quot;], &quot;hello&quot;, &quot;goodbye&quot;, [9, 2], 4] greeting_doubled = list(map(lambda element: 2 * element , lst)) print(greeting_doubled) . [[&#39;hi&#39;, &#39;bye&#39;, &#39;hi&#39;, &#39;bye&#39;], &#39;hellohello&#39;, &#39;goodbyegoodbye&#39;, [9, 2, 9, 2], 8] . Write a Python program to add three given lists using Python map and lambda | list(map(lambda a,b,c: a + b + c , [1 , 2 ,3] , [4 ,5 , 6] , [7 ,8 , 9])) . [12, 15, 18] . Filters . Filter function filter takes two arguments same like our map which has both function and a sequence parameters. Instead mapping them or making calculation with eachother, filter filters out the numbers either True or False. . The function takes one item and return True if the item should. It is automatically called for each item in the sequence . filter returns an iterator object like map, so we gotta wrap them by list. . def keep_evens(a_list): new_list = [] for elem in a_list: if elem % 2 == 0: new_list.append(elem) return new_list # Using the above function mixList = [2 , 88 , 33 , 22 , 14 , 0 , 8 , 10 , 20 , 4] evenList = keep_evens(mixList) print(evenList) . [2, 88, 22, 14, 0, 8, 10, 20, 4] . filterEvenList = list(filter(lambda elem: elem % 2 == 0 , mixList)) print(filterEvenList) . [2, 88, 22, 14, 0, 8, 10, 20, 4] . Let&#39;s Solve some Problems . Using filter, filter lst so that it only contains words containing the letter &#39;o&#39;. Assign to variable lst2. | lst = [&#39;witch&#39; , &#39;halloween&#39; , &#39;pumpkin&#39; , &#39;cat&#39; , &#39;candy&#39; , &#39;wagon&#39; ,&#39;moon&#39;] . lst = [&#39;witch&#39; , &#39;halloween&#39; , &#39;pumpkin&#39; , &#39;cat&#39; , &#39;candy&#39; , &#39;wagon&#39; , &#39;moon&#39;] lst2 = list(filter(lambda elem: &#39;o&#39; in elem , lst)) print(lst2) . [&#39;halloween&#39;, &#39;wagon&#39;, &#39;moon&#39;] . Write code to assign to the variable filter_testing all the elements in lst_check that have a &#39;w&#39; in them using filter. | lst_check = [&#39;plums&#39;, &#39;watermelon&#39;, &#39;kiwi&#39;, &#39;strawberries&#39;, &#39;blueberries&#39;, &#39;peaches&#39;, &#39;apples&#39;, &#39;mangos&#39;, &#39;papaya&#39;] . lst_check = [&#39;plums&#39;, &#39;watermelon&#39;, &#39;kiwi&#39;, &#39;strawberries&#39;, &#39;blueberries&#39;, &#39;peaches&#39;, &#39;apples&#39;, &#39;mangos&#39;, &#39;papaya&#39;] filter_testing = list(filter(lambda word: &#39;w&#39; in word , lst_check)) print(filter_testing) . [&#39;watermelon&#39;, &#39;kiwi&#39;, &#39;strawberries&#39;] . List Comprehensions . Before we saw those two functions namely map and filter turns out to be we don&#39;t want to use them much (or) in other words we can use list comprehensions inplace of using map and filter. Better we can pull off more flexibility by using list comprehensions. . In simple words list comprehensions is a convinient syntax to do map and filter operations. . Basic Syntax of list comprehension: . [ &lt;transformer_expression&gt; for &lt;iterator_variable&gt; in &lt;sequence&gt; if &lt;filteration_expression&gt;] . def double(value): return 2*value map_double_list = list(map(double , a_list)) print(f&#39;Using map function: {map_double_list}&#39;) . Using map function: [2, 4, 6, 8, 10, 12] . a_list . [1, 2, 3, 4, 5, 6] . compre_double_list = [value * 2 for value in a_list] compre_double_list . [2, 4, 6, 8, 10, 12] . Breaking down by the syntax: . transformer_expression : value * 2 | iterator_varaible : value | sequence : a_list | . filterEvenList = list(filter(lambda elem: elem % 2 == 0 , mixList)) print(filterEvenList) . [2, 88, 22, 14, 0, 8, 10, 20, 4] . mixList . [2, 88, 33, 22, 14, 0, 8, 10, 20, 4] . filterListComprehension = [element for element in mixList if element % 2 == 0] filterListComprehension . [2, 88, 22, 14, 0, 8, 10, 20, 4] . filterListComprehension == filterEvenList . True . Write code to assign to the variable compri all the values of the key name in any of the sub-dictionaries in the dictionary tester. Do this using a list comprehension. . tester = {&#39;info&#39;: [{&quot;name&quot;: &quot;Lauren&quot;, &#39;class standing&#39;: &#39;Junior&#39;, &#39;major&#39;: &quot;Information Science&quot;},{&#39;name&#39;: &#39;Ayo&#39;, &#39;class standing&#39;: &quot;Bachelor&#39;s&quot;, &#39;major&#39;: &#39;Information Science&#39;}, {&#39;name&#39;: &#39;Kathryn&#39;, &#39;class standing&#39;: &#39;Senior&#39;, &#39;major&#39;: &#39;Sociology&#39;}, {&#39;name&#39;: &#39;Nick&#39;, &#39;class standing&#39;: &#39;Junior&#39;, &#39;major&#39;: &#39;Computer Science&#39;}, {&#39;name&#39;: &#39;Gladys&#39;, &#39;class standing&#39;: &#39;Sophomore&#39;, &#39;major&#39;: &#39;History&#39;}, {&#39;name&#39;: &#39;Adam&#39;, &#39;major&#39;: &#39;Violin Performance&#39;, &#39;class standing&#39;: &#39;Senior&#39;}]} inner_list = tester[&#39;info&#39;] #print(inner_list) # For Readability import json print(json.dumps(inner_list , indent = 2)) . [ { &#34;name&#34;: &#34;Lauren&#34;, &#34;class standing&#34;: &#34;Junior&#34;, &#34;major&#34;: &#34;Information Science&#34; }, { &#34;name&#34;: &#34;Ayo&#34;, &#34;class standing&#34;: &#34;Bachelor&#39;s&#34;, &#34;major&#34;: &#34;Information Science&#34; }, { &#34;name&#34;: &#34;Kathryn&#34;, &#34;class standing&#34;: &#34;Senior&#34;, &#34;major&#34;: &#34;Sociology&#34; }, { &#34;name&#34;: &#34;Nick&#34;, &#34;class standing&#34;: &#34;Junior&#34;, &#34;major&#34;: &#34;Computer Science&#34; }, { &#34;name&#34;: &#34;Gladys&#34;, &#34;class standing&#34;: &#34;Sophomore&#34;, &#34;major&#34;: &#34;History&#34; }, { &#34;name&#34;: &#34;Adam&#34;, &#34;major&#34;: &#34;Violin Performance&#34;, &#34;class standing&#34;: &#34;Senior&#34; } ] . nameList = [] if True: for dict_name in inner_list: name = dict_name[&#39;name&#39;] nameList.append(name) print(nameList) . [&#39;Lauren&#39;, &#39;Ayo&#39;, &#39;Kathryn&#39;, &#39;Nick&#39;, &#39;Gladys&#39;, &#39;Adam&#39;] . compri = [dict_value[&#39;name&#39;] for dict_value in inner_list if True] compri . [&#39;Lauren&#39;, &#39;Ayo&#39;, &#39;Kathryn&#39;, &#39;Nick&#39;, &#39;Gladys&#39;, &#39;Adam&#39;] .",
            "url": "https://ashikshafi08.github.io/fastpages/jupyter/2021/04/11/map-filter.html",
            "relUrl": "/jupyter/2021/04/11/map-filter.html",
            "date": " • Apr 11, 2021"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hey it’s Ashik here! I ma Machine Learning Practitioner. .",
          "url": "https://ashikshafi08.github.io/fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://ashikshafi08.github.io/fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}