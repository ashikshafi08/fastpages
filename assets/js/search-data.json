{
  
    
        "post0": {
            "title": "Intro to Maps, Filters and List Comprehension in Python",
            "content": "How to use Maps, Filters and List Comprehension in Python. . This notebook will covers the tutorial of map,filter and list comprehension. It&#39;s me learning these python goodies and documenting aside, so someday I could look up and revise stuffs. . I am going through the course on Coursera called Python-3 Programming from University of Michigan. Gotta admit I learnt alot of Python from there and still doing. Earlier I used to take notes on Notion, but now I thought of getting my hands dirty by coding along and take notes in Colab. . Also anyone interested or wanna refresh their Python skills could even make use of it. . Maps . Python provides built-in functions map and filter, even a new syntax called list comprehension that lets you express a mapping/filtering operation. Most documentations and programmers use list comprehension and it seem&#39;s more like a pythonic way of writing code. . Map, and filter are commands that you would use in high-performance computing on big datasets. http://en.wikipedia.org/wiki/MapReduce . def doubleStuff(a_list): &#39;&#39;&#39; Returns a new list in which contains doubles of the elements in a list &#39;&#39;&#39; # Accum list new_list = [] # Looping through values and making the calculation for value in a_list: double_elem = 2 * value new_list.append(double_elem) return new_list # Using the above function a_list = [1 , 2, 3 , 4, 5 , 6] print(f&#39;List before the values were got double: {a_list}&#39;) double_list = doubleStuff(a_list) print(f&#39; nThe list after the values they got double the number: {double_list}&#39;) . List before the values were got double: [1, 2, 3, 4, 5, 6] The list after the values they got double the number: [2, 4, 6, 8, 10, 12] . We can write the above function with less than one line of code using the map function. . Map is a function which takes functions as the first input and sequence as an second input. map(function , sequence). Map just says apply the transforms (function) to every element in this sequence. . Map always expects a transformer function. . def double(value): return 2*value map_double_list = list(map(double , a_list)) print(f&#39;Using map function: {map_double_list}&#39;) . Using map function: [2, 4, 6, 8, 10, 12] . I earlier tried just map(double , a_list) which gave me just the map object. It turns out to be enclosing the map object by a list will gives us the list object. . But why this happens? Map function returns an iterator, it doesn&#39;t want to store the list in it&#39;s memory. It&#39;s still an iterator and we can grab the list we needed by enclosing the map object by a list which prevents pain to memory . . # Multiply 5 to every value map_lambda_list = list(map(lambda value: 5*value , a_list)) print(f&#39;Multiplying 5 to every element: {map_lambda_list}&#39;) . Multiplying 5 to every element: [5, 10, 15, 20, 25, 30] . Let&#39;s Solve some Problems! . Gotta go through more: https://www.w3resource.com/python-exercises/map/index.php . Below we have provided a list of strings called abbrevs. Use map to produce a new list called abbrevs_upper that contains all the same strings in upper case. | abbrevs = [&#39;usa&#39; , &#39;esp&#39; , &#39;chn&#39; , &#39;jpn&#39; , &#39;mex&#39; , &#39;can&#39; , &#39;rus&#39; , &#39;rsa&#39; , &#39;jam&#39;] . upperAbbrev_list = [] for abbrev in abbrevs: upperAbbrev_list.append(abbrev.upper()) print(upperAbbrev_list) . [&#39;USA&#39;, &#39;ESP&#39;, &#39;CHN&#39;, &#39;JPN&#39;, &#39;MEX&#39;, &#39;CAN&#39;, &#39;RUS&#39;, &#39;RSA&#39;, &#39;JAM&#39;] . upperCase_abbrevs = list(map(lambda abbrev: abbrev.upper() , abbrevs)) print(upperCase_abbrevs) . [&#39;USA&#39;, &#39;ESP&#39;, &#39;CHN&#39;, &#39;JPN&#39;, &#39;MEX&#39;, &#39;CAN&#39;, &#39;RUS&#39;, &#39;RSA&#39;, &#39;JAM&#39;] . Using map, create a list assigned to the variable greeting_doubled that doubles each element in the list. | lst = [[&quot;hi&quot;, &quot;bye&quot;], &quot;hello&quot;, &quot;goodbye&quot;, [9, 2], 4] . lst = [[&quot;hi&quot;, &quot;bye&quot;], &quot;hello&quot;, &quot;goodbye&quot;, [9, 2], 4] greeting_doubled = list(map(lambda element: 2 * element , lst)) print(greeting_doubled) . [[&#39;hi&#39;, &#39;bye&#39;, &#39;hi&#39;, &#39;bye&#39;], &#39;hellohello&#39;, &#39;goodbyegoodbye&#39;, [9, 2, 9, 2], 8] . Write a Python program to add three given lists using Python map and lambda | list(map(lambda a,b,c: a + b + c , [1 , 2 ,3] , [4 ,5 , 6] , [7 ,8 , 9])) . [12, 15, 18] . Filters . Filter function filter takes two arguments same like our map which has both function and a sequence parameters. Instead mapping them or making calculation with eachother, filter filters out the numbers either True or False. . The function takes one item and return True if the item should. It is automatically called for each item in the sequence . filter returns an iterator object like map, so we gotta wrap them by list. . def keep_evens(a_list): new_list = [] for elem in a_list: if elem % 2 == 0: new_list.append(elem) return new_list # Using the above function mixList = [2 , 88 , 33 , 22 , 14 , 0 , 8 , 10 , 20 , 4] evenList = keep_evens(mixList) print(evenList) . [2, 88, 22, 14, 0, 8, 10, 20, 4] . filterEvenList = list(filter(lambda elem: elem % 2 == 0 , mixList)) print(filterEvenList) . [2, 88, 22, 14, 0, 8, 10, 20, 4] . Let&#39;s Solve some Problems . Using filter, filter lst so that it only contains words containing the letter &#39;o&#39;. Assign to variable lst2. | lst = [&#39;witch&#39; , &#39;halloween&#39; , &#39;pumpkin&#39; , &#39;cat&#39; , &#39;candy&#39; , &#39;wagon&#39; ,&#39;moon&#39;] . lst = [&#39;witch&#39; , &#39;halloween&#39; , &#39;pumpkin&#39; , &#39;cat&#39; , &#39;candy&#39; , &#39;wagon&#39; , &#39;moon&#39;] lst2 = list(filter(lambda elem: &#39;o&#39; in elem , lst)) print(lst2) . [&#39;halloween&#39;, &#39;wagon&#39;, &#39;moon&#39;] . Write code to assign to the variable filter_testing all the elements in lst_check that have a &#39;w&#39; in them using filter. | lst_check = [&#39;plums&#39;, &#39;watermelon&#39;, &#39;kiwi&#39;, &#39;strawberries&#39;, &#39;blueberries&#39;, &#39;peaches&#39;, &#39;apples&#39;, &#39;mangos&#39;, &#39;papaya&#39;] . lst_check = [&#39;plums&#39;, &#39;watermelon&#39;, &#39;kiwi&#39;, &#39;strawberries&#39;, &#39;blueberries&#39;, &#39;peaches&#39;, &#39;apples&#39;, &#39;mangos&#39;, &#39;papaya&#39;] filter_testing = list(filter(lambda word: &#39;w&#39; in word , lst_check)) print(filter_testing) . [&#39;watermelon&#39;, &#39;kiwi&#39;, &#39;strawberries&#39;] . List Comprehensions . Before we saw those two functions namely map and filter turns out to be we don&#39;t want to use them much (or) in other words we can use list comprehensions inplace of using map and filter. Better we can pull off more flexibility by using list comprehensions. . In simple words list comprehensions is a convinient syntax to do map and filter operations. . Basic Syntax of list comprehension: . [ &lt;transformer_expression&gt; for &lt;iterator_variable&gt; in &lt;sequence&gt; if &lt;filteration_expression&gt;] . def double(value): return 2*value map_double_list = list(map(double , a_list)) print(f&#39;Using map function: {map_double_list}&#39;) . Using map function: [2, 4, 6, 8, 10, 12] . a_list . [1, 2, 3, 4, 5, 6] . compre_double_list = [value * 2 for value in a_list] compre_double_list . [2, 4, 6, 8, 10, 12] . Breaking down by the syntax: . transformer_expression : value * 2 | iterator_varaible : value | sequence : a_list | . filterEvenList = list(filter(lambda elem: elem % 2 == 0 , mixList)) print(filterEvenList) . [2, 88, 22, 14, 0, 8, 10, 20, 4] . mixList . [2, 88, 33, 22, 14, 0, 8, 10, 20, 4] . filterListComprehension = [element for element in mixList if element % 2 == 0] filterListComprehension . [2, 88, 22, 14, 0, 8, 10, 20, 4] . filterListComprehension == filterEvenList . True . Write code to assign to the variable compri all the values of the key name in any of the sub-dictionaries in the dictionary tester. Do this using a list comprehension. . tester = {&#39;info&#39;: [{&quot;name&quot;: &quot;Lauren&quot;, &#39;class standing&#39;: &#39;Junior&#39;, &#39;major&#39;: &quot;Information Science&quot;},{&#39;name&#39;: &#39;Ayo&#39;, &#39;class standing&#39;: &quot;Bachelor&#39;s&quot;, &#39;major&#39;: &#39;Information Science&#39;}, {&#39;name&#39;: &#39;Kathryn&#39;, &#39;class standing&#39;: &#39;Senior&#39;, &#39;major&#39;: &#39;Sociology&#39;}, {&#39;name&#39;: &#39;Nick&#39;, &#39;class standing&#39;: &#39;Junior&#39;, &#39;major&#39;: &#39;Computer Science&#39;}, {&#39;name&#39;: &#39;Gladys&#39;, &#39;class standing&#39;: &#39;Sophomore&#39;, &#39;major&#39;: &#39;History&#39;}, {&#39;name&#39;: &#39;Adam&#39;, &#39;major&#39;: &#39;Violin Performance&#39;, &#39;class standing&#39;: &#39;Senior&#39;}]} inner_list = tester[&#39;info&#39;] #print(inner_list) # For Readability import json print(json.dumps(inner_list , indent = 2)) . [ { &#34;name&#34;: &#34;Lauren&#34;, &#34;class standing&#34;: &#34;Junior&#34;, &#34;major&#34;: &#34;Information Science&#34; }, { &#34;name&#34;: &#34;Ayo&#34;, &#34;class standing&#34;: &#34;Bachelor&#39;s&#34;, &#34;major&#34;: &#34;Information Science&#34; }, { &#34;name&#34;: &#34;Kathryn&#34;, &#34;class standing&#34;: &#34;Senior&#34;, &#34;major&#34;: &#34;Sociology&#34; }, { &#34;name&#34;: &#34;Nick&#34;, &#34;class standing&#34;: &#34;Junior&#34;, &#34;major&#34;: &#34;Computer Science&#34; }, { &#34;name&#34;: &#34;Gladys&#34;, &#34;class standing&#34;: &#34;Sophomore&#34;, &#34;major&#34;: &#34;History&#34; }, { &#34;name&#34;: &#34;Adam&#34;, &#34;major&#34;: &#34;Violin Performance&#34;, &#34;class standing&#34;: &#34;Senior&#34; } ] . nameList = [] if True: for dict_name in inner_list: name = dict_name[&#39;name&#39;] nameList.append(name) print(nameList) . [&#39;Lauren&#39;, &#39;Ayo&#39;, &#39;Kathryn&#39;, &#39;Nick&#39;, &#39;Gladys&#39;, &#39;Adam&#39;] . compri = [dict_value[&#39;name&#39;] for dict_value in inner_list if True] compri . [&#39;Lauren&#39;, &#39;Ayo&#39;, &#39;Kathryn&#39;, &#39;Nick&#39;, &#39;Gladys&#39;, &#39;Adam&#39;] .",
            "url": "https://ashikshafi08.github.io/fastpages/jupyter/2021/04/11/python-goodies.html",
            "relUrl": "/jupyter/2021/04/11/python-goodies.html",
            "date": " • Apr 11, 2021"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://ashikshafi08.github.io/fastpages/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://ashikshafi08.github.io/fastpages/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "Hey it’s Ashik here! I ma Machine Learning Practitioner. .",
          "url": "https://ashikshafi08.github.io/fastpages/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://ashikshafi08.github.io/fastpages/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}